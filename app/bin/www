#!/usr/bin/env node

/**
 * Module dependencies.
 */
const cluster = require('cluster');
const http = require('http');
const process = require('process');
const Console = require('../modules/log');
var initSocketIOTables = require('./init-socket.io-tables');

var timerContext = require('../modules/timer-context');
var catalogUtil = require('../modules/sync/catalog-util');
const args = require('../modules/conf')();
const numCPUs = getThreadCount();
var vPath = args.virtual_dir_path;
var fs = require('fs');
var join = require('path').join;
var fx = require('mkdir-recursive');

const { setupMaster, setupWorker } = require("@socket.io/sticky");
const { createAdapter, setupPrimary } = require("@socket.io/cluster-adapter");

process.env["NODE_TLS_REJECT_UNAUTHORIZED"] = 1;
const port = parseInt(args.port || '3000');

// инициализация подключения
connect_pg = require('mobnius-pg-dbcontext/modules/pool-connection-db');
connect_pg.init(args.connection_string, `${args.application_name} - ${port}`);

if(connect_pg.pool()) {
    var pool = connect_pg.pool();
    Console.debug(`${process.pid}: подключение к БД ${pool.options.database} инициализировано`, 'INIT');
}

if (cluster.isMaster) {

    var cluster_map = {};

    var storage = join(__dirname, '../', args.sync_storage);
    if(!fs.existsSync(storage)) {
        fx.mkdirSync(storage);
    }

    Console.debug(`Инициализировано хранилище временных файлов: ${storage}`, 'INIT');

    clearTemporary();

    if(args.file_dir && !fs.existsSync(args.file_dir)) {
        fx.mkdirSync(args.file_dir);
    }

    Console.debug(`Инициализировано хранилище файлов: ${args.file_dir}`, 'INIT');

    initSocketIOTables.init(() => { // иниц. допол. таблицы для socket.io
        require('./init')(false, function() {  // инициализация схемы БД
            Console.log(`Primary ${process.pid} is running`, 'INIT');

            const httpServer = http.createServer();

            // setup sticky sessions
            setupMaster(httpServer, {
                loadBalancingMethod: "least-connection",
            });

            // setup connections between the workers
            setupPrimary();

            // needed for packets containing buffers (you can ignore it if you only send plaintext objects)
            // Node.js < 16.0.0
            //cluster.setupMaster({
            //    serialization: "advanced",
            //});
            // Node.js > 16.0.0
            cluster.setupPrimary({
                serialization: "advanced",
            });

            httpServer.listen(port);

            Console.log(`Main listening ${port}${vPath}`, 'INIT');

            // Fork workers
            for(var i = 0; i < numCPUs; i++) {
                var param = { 'WORKER_INDEX': i, 'PORT': port + (i+1) };
                var worker = cluster.fork(param);
                cluster_map[worker.process.pid] = param;
            }

            cluster.on('exit', (worker, code, signal) => {
                Console.log(`worker ${worker.process.pid} died`, 'INIT');
                var newWorker = cluster.fork(cluster_map[worker.process.pid]);

                cluster_map[newWorker.process.pid] = Object.assign({}, cluster_map[worker.process.pid]);
                delete cluster_map[worker.process.pid];
            });

            // создадим таймеры, делаем подключение к БД, подключение не закрываем
            timerContext((time) => {
                // тут обратный вызов для получения результат 
            });
        });
    });

    process.on('uncaughtException', function (err) {
        Console.error(`Неожиданная остановка приложения ${err.stack}`, 'INIT');
        connect_pg.close();
    
        process.exit();
    });

    return;
}

// инициализация дочернего процесса

const { Emitter } = require("@socket.io/postgres-emitter");

var server = null;

require('./init')(true, () => {  // инициализация схемы БД
    const socket = require('socket.io');

    connect_pg.query('select * from core.sf_system_settings()', null, (err, row) => {
        global.settings = {}

        if(!err) {
            for(var i in row.rows) {
                var item = row.rows[i];

                global.settings[item['c_key'].replace('system.', '')] = item['c_value'];
            }
        }

        const emitter = new Emitter(connect_pg.pool());

        const sync = require('../modules/sync');

        var app = require('../app');
        server = http.createServer(app);

        var io = socket(server, {
            path: vPath + 'socket.io',
            origins: '*:*',
            maxHttpBufferSize: args.memory || args.max_file_size
        });

        io.emitter = emitter;
        //app.io = io;
        global.io = io;
        
        // use the cluster adapter
        io.adapter(createAdapter());

        // setup connection with the primary process
        setupWorker(io);

        sync.init(io);
        server.listen(parseInt(process.env['PORT']));

        server.on('error', onError);
        server.on('listening', onListening);

        // инициализация firebase
        require('../modules/firebaseUtil').init('../mobilewalker-c2c96-firebase-adminsdk-h79wl-cee5cd6e72.json');
    });
});

process.on('uncaughtException', function (err) {
    Console.error(`Неожиданная остановка приложения ${err.stack}. Порт ${port}`, 'INIT');

    connect_pg.close();

    process.exit();
});

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
          Console.error(bind + ' requires elevated privileges', 'INIT');
          process.exit(1);
          break;
      case 'EADDRINUSE':
          Console.error(bind + ' is already in use', 'INIT');
          process.exit(1);
          break;
      default:
        throw error;
    }
}

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;

    Console.log(`Listening ${process.pid} on ` + bind + `${vPath}`, 'INIT');
}

function getThreadCount() {
    if(args.node_thread && args.node_thread != -1) {
        return args.node_thread;
    } else {
        return require('os').availableParallelism();
    }
}

/**
 * Очистка файловой системы от старых данных
 */
function clearTemporary() {
    var dir = join(__dirname, '../', args.sync_storage);
    var nTimeLine = 24 * 60 * 60 * 1000; // раз в сутки
    var nDay = 1;
    
    catalogUtil.removeLastDirs(dir, nDay, (cnt) => {
        Console.debug(`Удалено файлов: ${cnt}`, 'INIT');
    });

    
    setInterval(function () {
        catalogUtil.removeLastDirs(dir, nDay, (cnt) => {
            Console.debug(`Удалено файлов по расписанию: ${cnt}`, 'INIT');
        });
    }, nTimeLine);
}